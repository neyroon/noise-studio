name: Build & Publish

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  CR_PAT: ${{secrets.CR_PAT}}
  DATABASE_HOST: ${{secrets.DATABASE_HOST}}
  DATABASE_PORT: ${{secrets.DATABASE_PORT}}
  DATABASE_NAME: ${{secrets.DATABASE_NAME}}
  DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
  DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
  ADMIN_JWT_SECRET: ${{secrets.ADMIN_JWT_SECRET}}
  NEXT_PUBLIC_STRAPI_API_URL: ${{secrets.NEXT_PUBLIC_STRAPI_API_URL}}
  DATABASE_SSL: ${{secrets.DATABASE_SSL}}
  NODE_ENV: production

jobs:
  docker-push-next:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Pull frontend image to use as a cache
        run: docker pull ghcr.io/neyroon/noise-studio-frontend:latest || exit 0
      - name: Build frontend docker image
        run: docker build . --cache-from ghcr.io/neyroon/noise-studio-frontend:latest --tag ghcr.io/neyroon/noise-studio-frontend:latest --build-arg NEXT_PUBLIC_STRAPI_API_URL
      - name: Push the frontend image to GitHub Container Registry
        run: docker push ghcr.io/neyroon/noise-studio-frontend:latest
  docker-push-strapi:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Pull backend image to use as a cache
        run: docker pull ghcr.io/neyroon/noise-studio-backend:latest || exit 0
      - name: Build backend docker image
        run: docker build . --cache-from ghcr.io/neyroon/noise-studio-backend:latest --tag ghcr.io/neyroon/noise-studio-backend:latest --build-arg NEXT_PUBLIC_STRAPI_API_URL
      - name: Push backend image to GitHub Container Registry
        run: docker push ghcr.io/neyroon/noise-studio-backend:latest
  vps-update-pull-run:
    needs: [docker-push-next, docker-push-strapi]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: update docker-compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.VPS_HOST}}
          username: ${{secrets.VPS_USERNAME}}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "docker-compose.yml"
          target: "../srv"
          overwrite: true
      - name: pull image and run app containters
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.VPS_HOST}}
          username: ${{secrets.VPS_USERNAME}}
          password: ${{ secrets.VPS_PASSWORD }}
          envs: |
            CR_PAT,
            DATABASE_HOST,
            DATABASE_PORT,
            DATABASE_NAME,
            DATABASE_USERNAME,
            DATABASE_PASSWORD,
            ADMIN_JWT_SECRET,
            NEXT_PUBLIC_STRAPI_API_URL,
            NODE_ENV,
            DATABASE_SSL
          script: |
            echo $CR_PAT | docker login ghcr.io -u neyroon --password-stdin
            docker image prune -f
            docker pull ghcr.io/neyroon/noise-studio-frontend:latest
            docker pull ghcr.io/neyroon/noise-studio-backend:latest
            export DATABASE_HOST=$DATABASE_HOST
            export DATABASE_PORT=$DATABASE_PORT
            export DATABASE_NAME=$DATABASE_NAME
            export DATABASE_USERNAME=$DATABASE_USERNAME
            export DATABASE_PASSWORD=$DATABASE_PASSWORD
            export ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET
            export NEXT_PUBLIC_STRAPI_API_URL=$NEXT_PUBLIC_STRAPI_API_URL
            export DATABASE_SSL=$DATABASE_SSL
            export NODE_ENV=$NODE_ENV
            printenv
            cd ../srv
            docker-compose pull
            docker-compose up -d --no-deps
