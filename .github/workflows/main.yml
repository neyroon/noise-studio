name: Build & Publish
on:
  push:
    branches:
      - "main"

jobs:
  next-build:
    runs-on: ubuntu-latest
    container: node:14-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install next dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./frontend
      - name: Install strapi dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./backend
      - name: Install common dependencies
        run: yarn install
      - name: Build frontend and backend
        run: yarn build
        env:
          DATABASE_HOST: ${{secrets.DATABASE_HOST}}
          DATABASE_PORT: ${{secrets.DATABASE_PORT}}
          DATABASE_NAME: ${{secrets.DATABASE_NAME}}
          DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
          DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          ADMIN_JWT_SECRET: ${{secrets.ADMIN_JWT_SECRET}}
          NEXT_PUBLIC_STRAPI_API_URL: ${{secrets.NEXT_PUBLIC_STRAPI_API_URL}}
      - name: Upload Next build
        uses: actions/upload-artifact@v2
        with:
          name: build-frontend
          path: |
            ./frontend/.next
            ./frontend/public
          retention-days: 7
      - name: Upload Strapi build
        uses: actions/upload-artifact@v2
        with:
          name: build-backend
          path: |
            ./backend/.cache
            ./backend/build
          retention-days: 7
  docker-push:
    needs: next-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download Next build
        uses: actions/download-artifact@v2
        with:
          name: build-frontend
          path: frontend
      - name: Download Strapi build
        uses: actions/download-artifact@v2
        with:
          name: build-backend
          path: backend
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: LOG $GITHUB_REPOSITORY
        run: tree -L 2
      - name: Pull frontend image to use as a cache
        run: docker pull ghcr.io/neyroon/noise-studio-frontend:latest || exit 0
      - name: Pull backend image to use as a cache
        run: docker pull ghcr.io/neyroon/noise-studio-backend:latest || exit 0
      - name: Build frontend docker image
        run: docker build . --cache-from ghcr.io/neyroon/noise-studio-frontend:latest --tag ghcr.io/neyroon/noise-studio-frontend:latest
        working-directory: ./frontend
      - name: Build backend docker image
        run: docker build . --cache-from ghcr.io/neyroon/noise-studio-backend:latest --tag ghcr.io/neyroon/noise-studio-backend:latest
        working-directory: ./backend
      - name: Push the frontend image to GitHub Container Registry
        run: docker push ghcr.io/neyroon/noise-studio-frontend:latest
        working-directory: ./frontend
      - name: Push the backend image to GitHub Container Registry
        run: docker push ghcr.io/neyroon/noise-studio-backend:latest
        working-directory: ./backend
      - name: VPS - pull image and run app containters
        uses: appleboy/ssh-action@master
        env:
          CR_PAT: ${{secrets.CR_PAT}}
          DATABASE_HOST: ${{secrets.DATABASE_HOST}}
          DATABASE_PORT: ${{secrets.DATABASE_PORT}}
          DATABASE_NAME: ${{secrets.DATABASE_NAME}}
          DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
          DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          ADMIN_JWT_SECRET: ${{secrets.ADMIN_JWT_SECRET}}
          NEXT_PUBLIC_STRAPI_API_URL: ${{secrets.NEXT_PUBLIC_STRAPI_API_URL}}
          PG_USER: ${{secrets.PG_USER}}
          PG_PASS: ${{secrets.PG_PASS}}
          PG_DB: ${{secrets.PG_DB}}
        with:
          host: ${{secrets.VPS_HOST}}
          username: ${{secrets.VPS_USERNAME}}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo $CR_PAT | docker login ghcr.io -u neyroon --password-stdin
            docker pull ghcr.io/neyroon/noise-studio-frontend:latest
            docker pull ghcr.io/neyroon/noise-studio-backend:latest
            export DATABASE_HOST = $DATABASE_HOST
            export DATABASE_PORT = $DATABASE_PORT
            export DATABASE_NAME = $DATABASE_NAME
            export DATABASE_USERNAME = $DATABASE_USERNAME
            export DATABASE_PASSWORD = $DATABASE_PASSWORD
            export ADMIN_JWT_SECRET = $ADMIN_JWT_SECRET
            export NEXT_PUBLIC_STRAPI_API_URL = $NEXT_PUBLIC_STRAPI_API_URL
            export PG_USER = $PG_USER
            export PG_PASS = $PG_PASS
            export PG_DB = $PG_DB
            cd ../srv
            docker-compose pull
            docker-compose up -d --no-deps
